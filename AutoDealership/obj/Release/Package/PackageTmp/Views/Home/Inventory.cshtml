@using AutoDealership.Models
@model AutoDealership.Models.InventoryViewModel
@{
    ViewBag.Title = "Inventory";
}

<div class="row mb-5">

    @if (ViewData["ActiveNav"].ToString().ToLower().Contains("speed"))
    {
        @:<div class="text-center" id="inventory-header" style="background-image: url(https://d1i1eo6qmdfmdv.cloudfront.net/upload/site/pages/exotics_racing_LA/DSC0112s4j-2.jpg); background-position-y: center;">
        }
    else
    {
        @:<div class="text-center" id="inventory-header">
        }


                <div class="p-5">
                    <h2 class="h2 text-white fw-bold">@ViewData["ActiveNav"]</h2>
                    <h5 class="h5 text-white">Home > @ViewData["ActiveNav"]</h5>
                </div>
           </div>

</div>

<div class="container-fluid row">
    <div class="col-2 bg-light" style="height: fit-content;">
        <div class="row">
            <div class="my-blue-background-color fw-bold text-light text-uppercase text-center">
                <div class="text-start">
                    <i class="fas fa-caret-left fs-1" style="rotate: 45deg;"></i>
                </div>
                <p class="p-4">SEARCH OPTIONS</p>
            </div>
            <div class="bg-secondary bg-opacity-10 pb-2">
                <p class="d-inline-block p-2 my-blue-text-color">
                    <i class="far fa-filter p-1"></i>TAGS
                </p>
                <a href="/Home/Inventory" class="page-link text-decoration-underline fs-6 my-blue-text-color">Clear filters</a>
                @foreach (string s in Model.SearchQuery)
                {
                    <span class="badge rounded-pill text-bg-primary bg-opacity-100">@s.ToUpper()</span>
                }
            </div>
            <hr />
            <div class="mb-5">

                @*NEW STYLE SEARCH OPTIONS*@

                <div id="search-options-brand" class="text-center mb-5">
                    <p class="text-dark fw-bold text-uppercase pb-3">By brand</p>

                    <select class="form-select" multiple name="search-brand" id="search-brand">
                        <option value="-1" selected>All brands</option>
                        @foreach (Brand brand in Model.AllBrands)
                        {
                            if (brand.Vehicles != null)
                            {
                                <option class="my-blue-text-color" value="@brand.Id">@Html.Raw(brand.Name + " (" + brand.Vehicles.Where(veh => Model.FullInventory.Contains(veh)).ToList().Count + ")")</option>
                            }
                            else
                            {
                                <option class="my-blue-text-color" value="@brand.Id">@Html.Raw(brand.Name + " (0)")</option>
                            }
                        }
                    </select>
                </div>

                <hr />

                <div id="search-options-price" class="text-center mb-5">
                    <p class="text-dark fw-bold text-uppercase pb-3">Price range</p>

                    <div class="slider m-auto">
                        <div class="range-slider">
                            <span class="rangeValues fw-semibold my-blue-text-color"></span>
                            <input id="min-price-input" value="@ViewBag.MinPrice" min="@ViewBag.MinPrice" max="@ViewBag.MaxPrice" step="100" type="range">
                            <input id="max-price-input" value="@ViewBag.MaxPrice" min="@ViewBag.MinPrice" max="@ViewBag.MaxPrice" step="100" type="range">
                        </div>
                    </div>
                </div>

                <hr />

                <div id="search-options-bodystyle" class="text-center mb-5">
                    <p class="text-dark fw-bold text-uppercase pb-3">vehicle body type</p>

                    <div class="row row-cols-2">
                        @foreach (string style in Enum.GetNames(typeof(AutoDealership.Models.Types.BodyStyle)))
                        {
                            string id = "btn-check-" + style.ToLower();
                            var imgPath = "/Content/Images/BodyStyles/" + style + ".svg";
                            <div class="col mb-2">
                                <input type="checkbox" class="btn-check" name="bodystyle-buttons" id="@id" autocomplete="off" value="@style" onclick="inventoryFilter()">
                                <label class="btn-sm btn bg-white my-blue-text-color fw-semibold small" for="@id">
                                    <img width="60" src="@imgPath" />
                                    @style
                                </label>
                            </div>
                        }
                    </div>
                </div>

                <hr />

                <div id="search-options-fueltype" class="text-center mb-5">
                    <p class="text-dark fw-bold text-uppercase pb-3">Fuel Type</p>

                    <select class="form-select" name="search-fueltype" id="search-fueltype">
                        <option value="" selected>All fuel types</option>
                        @foreach (string fuel in Enum.GetNames(typeof(AutoDealership.Models.Fuel)))
                        {
                            <option class="my-blue-text-color" value="@fuel">@fuel</option>
                        }
                    </select>

                </div>

                <hr />

                <div id="search-options-mileage" class="text-center mb-5">
                    <p class="text-dark fw-bold text-uppercase pb-3">Maximum mileage</p>

                    <input type="number" class="form-control my-blue-text-color" id="max-mileage" oninput="inventoryFilter()">
                    <span class="fst-italic">or less</span>

                </div>

                <hr />

                <div class="text-center">
                    <a href="/Home/Inventory" class="text-uppercase btn btn-warning text-light fw-bold text-center">RESET FILTER</a>
                </div>


                @*NEW STYLE SEARCH OPTIONS*@


                <!--<div class="accordion accordion-flush" id="accordionFlushExample">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="flush-headingOne">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                            Brand
                        </button>
                    </h2>
                    <div id="flush-collapseOne" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
                        <div class="accordion-body">
                            @foreach (var brand in Model.AllBrands)
                            {
                                <div class="form-check">
                                    <label class="form-check-label" for="flexCheckDefault">
                                        @brand.Name
                                        @if (brand.Vehicles != null)
                                        {
                                            @Html.Raw("(" + brand.Vehicles.Count + ")")
                                        }
                                        else
                                        {
                                            @Html.Raw("(0)")
                                        }
                                    </label>
                                    <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header" id="flush-headingTwo">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseTwo" aria-expanded="false" aria-controls="flush-collapseTwo">
                            Price
                        </button>
                    </h2>
                    <div id="flush-collapseTwo" class="accordion-collapse collapse" aria-labelledby="flush-headingTwo" data-bs-parent="#accordionFlushExample">
                        <div class="accordion-body">
                            <div class="slider m-auto">
                                <div class="range-slider">
                                    <span class="rangeValues"></span>
                                    <input value="@ViewBag.MinPrice" min="@ViewBag.MinPrice" max="@ViewBag.MaxPrice" step="500" type="range">
                                    <input value="@ViewBag.MaxPrice" min="@ViewBag.MinPrice" max="@ViewBag.MaxPrice" step="500" type="range">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>-->
                @*</div>*@
                <!--<div class="accordion-item">
                        <h2 class="accordion-header" id="flush-headingThree">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseThree" aria-expanded="false" aria-controls="flush-collapseThree">
                                Body Style
                            </button>
                        </h2>
                        <div id="flush-collapseThree" class="accordion-collapse collapse" aria-labelledby="flush-headingThree" data-bs-parent="#accordionFlushExample">
                            <div class="accordion-body">
                                @foreach (string style in Enum.GetNames(typeof(AutoDealership.Models.Types.BodyStyle)))
                                {
                                    <div class="form-check">
                                        <label class="form-check-label" for="flexCheckDefault">
                                            @String.Format("{0}", style[0] + style.Substring(1).ToLower())
                                        </label>
                                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="flush-headingFour">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseFour" aria-expanded="false" aria-controls="flush-collapseFour">
                                Fuel
                            </button>
                        </h2>
                        <div id="flush-collapseFour" class="accordion-collapse collapse" aria-labelledby="flush-headingFour" data-bs-parent="#accordionFlushExample">
                            <div class="accordion-body">
                                @foreach (string fuel in Enum.GetNames(typeof(AutoDealership.Models.Fuel)))
                                {
                                    <div class="form-check">
                                        <label class="form-check-label" for="flexCheckDefault">
                                            @String.Format("{0}", fuel[0] + fuel.Substring(1).ToLower())
                                        </label>
                                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="flush-headingFive">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseFive" aria-expanded="false" aria-controls="flush-collapseFive">
                                Mileage
                            </button>
                        </h2>
                        <div id="flush-collapseFive" class="accordion-collapse collapse" aria-labelledby="flush-headingFive" data-bs-parent="#accordionFlushExample">
                            <div class="accordion-body">
                                <p>Maximum mileage</p>
                                <input type="number" class="form-control" id="max-mileage">
                                <span class="fst-italic">or less</span>
                            </div>
                        </div>
                    </div>
                </div>-->
            </div>
        </div>
    </div>
    <div class="col-10 position-relative">

        <div class="container mb-5">
            <select style="width: fit-content;" class="form-select float-start" name="num-cols-inventory" id="num-cols-inventory">
                <option value="4">4 Columns</option>
                <option value="3">3 Columns</option>
            </select>

            <select style="width: fit-content;" class="form-select float-end" name="orderby-inventory" id="orderby-inventory">
                <option value="">Sort by Date Added</option>
                <option value="ascending">Sort by Cheapest First</option>
                <option value="descending">Sort by Most Expensive First</option>
            </select>

        </div>

        <hr />
        <div id="vehicles-partial-div">
            @Html.Partial("_Vehicles", ViewData)
        </div>


    </div>
</div>

@section Scripts {

    <script>

        @*$(document).ready(function () {
            $("#num-cols-inventory").change(function () {
                @Model.Searc         });
        });*@

        function getVals() {
            // Get slider values
            let parent = this.parentNode;
            let slides = parent.getElementsByTagName("input");
            let slide1 = parseFloat(slides[0].value);
            let slide2 = parseFloat(slides[1].value);
            // Neither slider will clip the other, so make sure we determine which is larger
            if (slide1 > slide2) { let tmp = slide2; slide2 = slide1; slide1 = tmp; }

            let displayElement = parent.getElementsByClassName("rangeValues")[0];
            //innerHTML property allows Javascript code to manipulate a website being displayed
            displayElement.innerHTML = "$" + slide1 + " - $" + slide2;
        }

        window.onload = function () {
            // Initialize Sliders
            let sliderSections = document.getElementsByClassName("range-slider");
            for (let x = 0; x < sliderSections.length; x++) {
                let sliders = sliderSections[x].getElementsByTagName("input");
                for (let y = 0; y < sliders.length; y++) {
                    if (sliders[y].type === "range") {
                        //oninput attribute fires when the value of an <input> element is changed
                        sliders[y].oninput = getVals;
                        // Manually trigger event first time to display values
                        sliders[y].oninput();
                    }
                }
            }
        }

        function inventoryFilter() {
                var sortOrder = $("#orderby-inventory").val();
                var cols = $("#num-cols-inventory").val();
                var brands = $("#search-brand").val();
                var minPrice = $("#min-price-input").val();
                var maxPrice = $("#max-price-input").val();
                var fuelType = $("#search-fueltype").val();
                var maxMileage = $("#max-mileage").val();
                var pages = $("#inventory-pagination .page-item.active").attr("data-page-num");
                var bodyStyles = [];

                var bodyStylesChecks = document.getElementsByName("bodystyle-buttons");
                for (var i = 0; i < bodyStylesChecks.length; i++) {
                    if (bodyStylesChecks[i].checked) {
                        bodyStyles.push(bodyStylesChecks[i].value);
                    }
                }



                @*@Model.NumCols = (cols == null || cols == 4) ? 4 : 3;*@

                @*var partialView = `@Html.Partial("_Vehicles", Model)`;*@
                var model = {
                    "Inventory": @Html.Raw(Json.Encode(Model.Inventory)),
                    "FullInventory": @Html.Raw(Json.Encode(Model.FullInventory)),
                    "SearchQuery": @Html.Raw(Json.Encode(Model.SearchQuery)),
                    "NumCols": (cols == null || cols == 4) ? 4 : 3,
                    "SortOrder": (!sortOrder) ? "" : sortOrder,
                    "Brands": brands,
                    "MinPrice": minPrice,
                    "MaxPrice": maxPrice,
                    "BodyStyles": bodyStyles,
                    "FuelType": fuelType,
                    "MaxMileage": maxMileage,
                    "Page": pages,
                    "ActivePage": @Html.Raw(Json.Encode(Model.ActivePage))
                };
                //$("#vehicles-partial-div").html(partialView);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("InventoryFilter", "Home")',
                    data: { Inventory: model.Inventory, FullInventory: model.FullInventory, SearchQuery: model.SearchQuery, NumCols: model.NumCols, SortOrder: model.SortOrder, Brands: model.Brands, MinPrice: model.MinPrice, MaxPrice: model.MaxPrice, BodyStyles: model.BodyStyles, FuelType: model.FuelType, MaxMileage: model.MaxMileage, Page: model.Page, ActivePage: model.Page-1 },
                    cache: false,
                    success: function (partialView) {
                        $("#vehicles-partial-div").html(partialView);
                        //$("#inventory-pagination").load(location.href + " #inventory-pagination>*", "");
                    },
                    error: function (error) {
                        console.log('Exception:', error.responseText);
                    }
                });
        }

        $(document).ready(function () {
            $("#nav-item-home").removeClass("my-navbar-active");
            $("#nav-item-contact").removeClass("my-navbar-active");
            $("#nav-item-about").removeClass("my-navbar-active");
            $("#nav-item-inventory").addClass("my-navbar-active");

            $(".vehicle-card").hover(function () {
                $(".vehicle-card-image").toggleClass("vehicle-card-inner");
            });

            //$("orderby-inventory").change(function () {
            //    var sortOrder = $("#orderby-inventory").val();
            //    var cols = $("#num-cols-inventory").val();
            //});

            $("#num-cols-inventory,#orderby-inventory,#search-brand,#min-price-input,#max-price-input,#search-fueltype").change(function () {
                inventoryFilter();
            });


        });

        $(document).on('click', '#inventory-pagination .page-item', function () {
            $(this).addClass("active");
            $(this).siblings().removeClass("active");
            var pageNum = $(this).attr("data-page-num");
            inventoryFilter();
        });

        //$("#inventory-pagination .page-item").click(function () {
        //    $(this).addClass("active");
        //    $(this).siblings().removeClass("active");
        //    var pageNum = $(this).attr("data-page-num");
        //    inventoryFilter();
        //});

        function openVehicleDetails(id) {
            window.location.href = "/Vehicle/Details/" + id;
        }

    </script>

}
